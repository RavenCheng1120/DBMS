[Task 1]
$ CREATE CONSTRAINT studentIdConstraint ON (s:Student) ASSERT s.學號 IS UNIQUE

$ LOAD CSV WITH HEADERS FROM "file:///hw6_student_data.csv" AS csvLine
CREATE (s:Student {身份: csvLine.身份, 系所: csvLine.系所, 學號: csvLine.學號, 姓名: csvLine.姓名})


[Task 2]
$ MATCH (a:Student {學號: 'r09922063'}),(b:Student {系所: '資工系碩士班_一年級 '})
WHERE b.學號 <> 'r09922063'
CREATE (a)-[r:peer]->(b)
RETURN type(r)


[Task 3]
$ MATCH (s:Student {系所: '資工系碩士班_一年級 '})
RETURN COLLECT(s)


Part 3
[Task 1]
$ LOAD CSV WITH HEADERS FROM "file:///hw6_hobbies.csv" AS csvLine
MERGE (a:Hobby {hobby: csvLine.hobby1})
MERGE (b:Hobby {hobby: csvLine.hobby2})
MERGE (c:Hobby {hobby: csvLine.hobby3})
MERGE (d:Hobby {hobby: csvLine.hobby4})
MERGE (e:Hobby {hobby: csvLine.hobby5})

$ LOAD CSV WITH HEADERS FROM "file:///hw6_hobbies.csv" AS csvLine
CREATE (:Student {學號: csvLine.學號, 姓名: csvLine.姓名})

// Need to do 5 times
$ LOAD CSV WITH HEADERS FROM "file:///hw6_hobbies.csv" AS csvLine
MATCH (s:Student {學號: csvLine.學號}), (h:Hobby {hobby: csvLine.hobby1})
MERGE (s)-[r:interestIn]->(h)


[Pre-Task 2]
// Find friends with same hobby
$ MATCH (me:Student {學號: 'r09922063'})--(myh:Hobby)
MATCH (friend:Student)--(friendh:Hobby)
WHERE myh.hobby = friendh.hobby AND friend.學號 <> 'r09922063'
MERGE (me)-[r:hobbyFriends]->(friend)

// Print out the result
$ MATCH p=()-[r1:hobbyFriends]->() 
MATCH x=(me:Student {學號: 'r09922063'})-[r2:interestIn]->() 
RETURN p,x


// Solutoin 1: Connect my friends to their own hobbyfriends
$ MATCH (me:Student {學號: 'r09922063'})-[rHobbyF:hobbyFriends]->(friend:Student)--(friendh:Hobby)
MATCH (foaf:Student)--(foafh:Hobby)
WHERE foafh.hobby = friendh.hobby AND foaf.學號 <> 'r09922063'
MERGE (friend)-[r:hobbyFriends]->(foaf)

// Solution 2: Connect myself to the foaf
$ MATCH (me:Student {學號: 'r09922063'})-[rHobbyF:hobbyFriends]->(friend:Student)--(friendh:Hobby)
MATCH (foaf:Student)--(foafh:Hobby)
WHERE foafh.hobby = friendh.hobby AND foaf.學號 <> 'r09922063' AND NOT (me)-[:hobbyFriends]->(foaf)
MERGE (me)-[r:foaf]->(foaf)

// print result -> with me
$ MATCH p=()-[r:foaf]->()--(h:Hobby)
RETURN p


[Task 2]
// print result -> without me
$ MATCH (a:Student {學號:'r09922063'})-[r:foaf]->(ff)--(h:Hobby)
RETURN ff,h


[Task 3]
// connect my foaf to its hobby friends
$ MATCH (me:Student {學號: 'r09922063'})-[r1:foaf]->(ff:Student)--(ffh:Hobby)
MATCH (ffFriend:Student)--(ffFriendh:Hobby)
WHERE ffh.hobby = ffFriendh.hobby AND ffFriend.學號 <> ff.學號
MERGE (ff)-[r2:hobbyFriends]->(ffFriend)

// connect my foaf to its foaf
$ MATCH (me:Student {學號: 'r09922063'})-[r1:foaf]->(ff:Student)--(ffh:Hobby)
MATCH (ff:Student)-[r2:hobbyFriends]->(ffFriend:Student)--(ffFriendh:Hobby)
MATCH (foafFF:Student)--(foafFFh:Hobby)
WHERE ffFriendh.hobby = foafFFh.hobby AND NOT (ff)-[:hobbyFriends]->(foafFF) AND foafFF.學號 <> ff.學號
MERGE (ff)-[r3:foaf]->(foafFF)


// print -> foafFFh.hobby <> myh.hobby didn't work. 
$ MATCH (me:Student {學號: 'r09922063'})-[r1:foaf]->(ff:Student)--(ffh:Hobby)
MATCH (me:Student {學號: 'r09922063'})--(myh:Hobby)
MATCH (ff)-[r3:foaf]->(foafFF)--(foafFFh:Hobby)
WHERE foafFFh.hobby <> myh.hobby AND foafFF.學號 <> 'r09922063'
RETURN DISTINCT(foafFFh)


// print result
$ MATCH (me:Student {學號: 'r09922063'})-[r1:foaf]->()-[r3:foaf]->(foafFF)--(foafFFh:Hobby)
MATCH (me:Student {學號: 'r09922063'})--(myh:Hobby)
WHERE foafFF.學號 <> 'r09922063' AND NOT foafFFh.hobby IN ['看電影', '聽音樂', '畫圖', '看遊戲實況', '逛展']
RETURN DISTINCT(foafFFh)